@startuml
abstract class AbstractFlyingObject {
# int locationX
# int locationY
# int speedX
# int speedY
# BufferedImage image
# int width
# int height
# boolean isValid
+ void forward()
+ boolean crash(AbstractFlyingObject)
+ int getLocationX()
+ int getLocationY()
+ void setLocation(double,double)
+ int getSpeedY()
+ BufferedImage getImage()
+ int getWidth()
+ int getHeight()
+ boolean notValid()
+ void vanish()
}

abstract class AbstractAircraft {
# int maxHp
# int hp
+ void decreaseHp(int)
+ void increaseHp(int)
+ int getHp()
+ {abstract}List<AbstractBullet> shoot()
}

abstract class AbstractBullet {
- int power
+ void forward()
+ int getPower()
}

abstract class AbstarctProp {
+ {abstract}void takeEffect(HeroAircraft)
}

abstract class AbstractEnemyAircraft {
+ void forward()
+ {abstract}List<AbstarctProp> LeftProp()
}

class MobEnemy {
+ List<AbstractBullet> shoot()
+ List<AbstarctProp> LeftProp()
}

class EliteEnemy {
- int shootNum
- int power
- int direction
+ List<AbstractBullet> shoot()
+ List<AbstarctProp> LeftProp()
}

class HeroAircraft {
- int shootNum
- int power
- int direction
+ void forward()
+ List<AbstractBullet> shoot()
}

class EnemyBullet {
}

class HeroBullet {
}

class BulletProp {
+ void takeEffect(HeroAircraft)
}

class BombProp {
+ void takeEffect(HeroAircraft)
}

class BloodProp {
+ void takeEffect(HeroAircraft)
}



AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractBullet
AbstractFlyingObject <|-- AbstarctProp

AbstractAircraft <|-- AbstractEnemyAircraft
AbstractEnemyAircraft <|-- MobEnemy
AbstractEnemyAircraft <|-- EliteEnemy

AbstractAircraft <|-- HeroAircraft

AbstractBullet <|-- EnemyBullet
AbstractBullet <|-- HeroBullet

AbstarctProp <|-- BulletProp
AbstarctProp <|-- BombProp
AbstarctProp <|-- BloodProp


@enduml